var documenterSearchIndex = {"docs":
[{"location":"matsubara_freq/#MatsubaraFrequency","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"","category":"section"},{"location":"matsubara_freq/","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"A MatsubaraFrequency{PT} of particle type PT at temperature T and with Matsubara index n can be generated using","category":"page"},{"location":"matsubara_freq/","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"T = 1.0\nn = 5\nv = MatsubaraFrequency(T, n, Fermion) # v = \\pi T (2 n + 1) \nw = MatsubaraFrequency(T, n, Boson)   # w = \\pi T (2 n    )","category":"page"},{"location":"matsubara_freq/","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"Matsubara frequencies can be added, subtracted and their sign can be reversed, producing a new instance of MatsubaraFrequency,  potentially of different particle type.","category":"page"},{"location":"matsubara_freq/","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"v1 = v + v # typeof(v1) = MatsubaraFrequency{Boson}\nv2 = w - v # typeof(v2) = MatsubaraFrequency{Fermion}\nv3 = -v    # typeof(v3) = MatsubaraFrequency{Fermion}","category":"page"},{"location":"matsubara_freq/#Types","page":"MatsubaraFrequency","title":"Types","text":"","category":"section"},{"location":"matsubara_freq/","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"AbstractParticle","category":"page"},{"location":"matsubara_freq/#MatsubaraFunctions.AbstractParticle","page":"MatsubaraFrequency","title":"MatsubaraFunctions.AbstractParticle","text":"abstract type AbstractParticle\n\n\n\n\n\n","category":"type"},{"location":"matsubara_freq/","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"Fermion","category":"page"},{"location":"matsubara_freq/#MatsubaraFunctions.Fermion","page":"MatsubaraFrequency","title":"MatsubaraFunctions.Fermion","text":"struct Fermion <: AbstractParticle\n\n\n\n\n\n","category":"type"},{"location":"matsubara_freq/","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"Boson","category":"page"},{"location":"matsubara_freq/#MatsubaraFunctions.Boson","page":"MatsubaraFrequency","title":"MatsubaraFunctions.Boson","text":"struct Boson <: AbstractParticle\n\n\n\n\n\n","category":"type"},{"location":"matsubara_freq/","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"AbstractMatsubaraFrequency","category":"page"},{"location":"matsubara_freq/#MatsubaraFunctions.AbstractMatsubaraFrequency","page":"MatsubaraFrequency","title":"MatsubaraFunctions.AbstractMatsubaraFrequency","text":"abstract type AbstractMatsubaraFrequency\n\n\n\n\n\n","category":"type"},{"location":"matsubara_freq/","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"MatsubaraFrequency","category":"page"},{"location":"matsubara_freq/#MatsubaraFunctions.MatsubaraFrequency","page":"MatsubaraFrequency","title":"MatsubaraFunctions.MatsubaraFrequency","text":"struct MatsubaraFrequency{PT <: AbstractParticle} <: AbstractMatsubaraFrequency\n\nMatsubaraFrequency type with fields:\n\nT   :: Float64 : temperature\nval :: Float64 : position on the imaginary axis\nidx :: Int64   : Matsubara index\n\n\n\n\n\n","category":"type"},{"location":"matsubara_freq/#Functions","page":"MatsubaraFrequency","title":"Functions","text":"","category":"section"},{"location":"matsubara_freq/","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"temperature","category":"page"},{"location":"matsubara_freq/#MatsubaraFunctions.temperature","page":"MatsubaraFrequency","title":"MatsubaraFunctions.temperature","text":"function temperature(\n    w :: MatsubaraFrequency\n    ) :: Float64\n\nReturns w.T\n\n\n\n\n\nfunction temperature(\n    grid :: AbstractMatsubaraGrid\n    )    :: Float64\n\nReturns grid.T\n\n\n\n\n\nfunction temperature(\n    f :: MatsubaraFunction\n    ) :: Float64\n\nReturns temperature for which f.grids are defined\n\n\n\n\n\n","category":"function"},{"location":"matsubara_freq/","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"value","category":"page"},{"location":"matsubara_freq/#MatsubaraFunctions.value","page":"MatsubaraFrequency","title":"MatsubaraFunctions.value","text":"function value(\n    w :: MatsubaraFrequency\n    ) :: Float64\n\nReturns w.val\n\n\n\n\n\n","category":"function"},{"location":"matsubara_freq/","page":"MatsubaraFrequency","title":"MatsubaraFrequency","text":"index","category":"page"},{"location":"matsubara_freq/#MatsubaraFunctions.index","page":"MatsubaraFrequency","title":"MatsubaraFunctions.index","text":"function index(\n    w :: MatsubaraFrequency\n    ) :: Int64\n\nReturns w.idx\n\n\n\n\n\nfunction index( \n    x :: MatsubaraIndex\n    ) :: Int64\n\nReturns x.idx\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_symmetries/#Advanced-Usage:-Automated-Symmetry-Reduction","page":"Symmetry reduction","title":"Advanced Usage: Automated Symmetry Reduction","text":"","category":"section"},{"location":"matsubara_func_symmetries/","page":"Symmetry reduction","title":"Symmetry reduction","text":"In many cases, the numerical effort of computing functions in the Matsubara domain can be drastically reduced by the use of symmetries. For one-particle Green's functions G_i_1 i_2(iomega), for example, hermicity of the Hamiltonian dictates that G_i_1 i_2(iomega) = G^star_i_2 i_1(-iomega), relating positive and negative Matsubara frequencies. We offer an automated way to compute the set of irreducible (i.e. unrelatable by symmetries) MatsubaraFunction components, as is illustrated in the following example","category":"page"},{"location":"matsubara_func_symmetries/","page":"Symmetry reduction","title":"Symmetry reduction","text":"ξ = 0.5\nT = 1.0\nN_= 128\ng = MatsubaraGrid(T, N_, Fermion)\nf = MatsubaraFunction(g, 1)\n\nfor v in g\n    f[v, 1] = 1.0 / (im * value(v) - ξ)\nend \n\n# complex conjugation acting on Green's function\nfunction conj(\n    w :: Tuple{MatsubaraFrequency},\n    x :: Tuple{Int64}\n    ) :: Tuple{Tuple{MatsubaraFrequency}, Tuple{Int64}, MatsubaraOperation}\n\n    return (-w[1],), (x[1],), MatsubaraOperation(false, true)\nend \n\n# compute the symmetry group \nSG = MatsubaraSymmetryGroup([MatsubaraSymmetry{1, 1}(conj)], f)\n\n# obtain another Green's function by symmetrization\nfunction init(\n    w :: Tuple{MatsubaraFrequency},\n    x :: Tuple{Int64}\n    ) :: ComplexF64\n\n    return f[w, x...]\nend \n\nInitFunc = MatsubaraInitFunction{1, 1, ComplexF64}(init)\nh        = MatsubaraFunction(g, 1)\nSG(h, InitFunc)\n@assert h == f","category":"page"},{"location":"matsubara_func_symmetries/#Functions-and-Functors-for-symmetry-reduction","page":"Symmetry reduction","title":"Functions and Functors for symmetry reduction","text":"","category":"section"},{"location":"matsubara_func_symmetries/","page":"Symmetry reduction","title":"Symmetry reduction","text":"MatsubaraOperation","category":"page"},{"location":"matsubara_func_symmetries/#MatsubaraFunctions.MatsubaraOperation","page":"Symmetry reduction","title":"MatsubaraFunctions.MatsubaraOperation","text":"struct MatsubaraOperation\n\nMatsubaraOperation type with fields:\n\nsgn :: Bool : change sign?\ncon :: Bool : complex conjugation?\n\n\n\n\n\n","category":"type"},{"location":"matsubara_func_symmetries/","page":"Symmetry reduction","title":"Symmetry reduction","text":"MatsubaraSymmetry","category":"page"},{"location":"matsubara_func_symmetries/#MatsubaraFunctions.MatsubaraSymmetry","page":"Symmetry reduction","title":"MatsubaraFunctions.MatsubaraSymmetry","text":"struct MatsubaraSymmetry{GD, SD}\n\nMatsubaraSymmetry type with fields:\n\nf :: Function\n\n\n\n\n\n","category":"type"},{"location":"matsubara_func_symmetries/","page":"Symmetry reduction","title":"Symmetry reduction","text":"MatsubaraSymmetryGroup","category":"page"},{"location":"matsubara_func_symmetries/#MatsubaraFunctions.MatsubaraSymmetryGroup","page":"Symmetry reduction","title":"MatsubaraFunctions.MatsubaraSymmetryGroup","text":"MatsubaraSymmetryGroup{GD, SD, DD, Q <: Number}\n\nMatsubaraSymmetryGroup type with fields:\n\nclasses :: Vector{Vector{Tuple{Int64, MatsubaraOperation}}} : collections of symmetry equivalent elements\nspeedup :: Float64                                          : expected speedup from the symmetry reduction\n\n\n\n\n\n","category":"type"},{"location":"matsubara_func_symmetries/","page":"Symmetry reduction","title":"Symmetry reduction","text":"MatsubaraInitFunction","category":"page"},{"location":"matsubara_func_symmetries/#MatsubaraFunctions.MatsubaraInitFunction","page":"Symmetry reduction","title":"MatsubaraFunctions.MatsubaraInitFunction","text":"struct MatsubaraInitFunction{GD, SD, Q <: Number}\n\nMatsubaraInitFunction type with fields:\n\nf :: Function \n\n\n\n\n\n","category":"type"},{"location":"matsubara_func_symmetries/","page":"Symmetry reduction","title":"Symmetry reduction","text":"get_reduced","category":"page"},{"location":"matsubara_func_symmetries/#MatsubaraFunctions.get_reduced","page":"Symmetry reduction","title":"MatsubaraFunctions.get_reduced","text":"function get_reduced(\n    SG :: MatsubaraSymmetryGroup{GD, SD, DD, Q},\n    f  :: MatsubaraFunction{GD, SD, DD, Q}\n    )  :: Vector{Q} where {GD, SD, DD, Q <: Number}\n\nCalculate symmetry reduced representation of MatsubaraFunction\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_symmetries/","page":"Symmetry reduction","title":"Symmetry reduction","text":"init_from_reduced!","category":"page"},{"location":"matsubara_func_symmetries/#MatsubaraFunctions.init_from_reduced!","page":"Symmetry reduction","title":"MatsubaraFunctions.init_from_reduced!","text":"function init_from_reduced!(\n    SG   :: MatsubaraSymmetryGroup{GD, SD, DD, Q},\n    f    :: MatsubaraFunction{GD, SD, DD, Q},\n    fvec :: AbstractVector{Q}\n    )    :: Nothing where {GD, SD, DD, Q <: Number}\n\nInitialize MatsubaraFunction from symmetry reduced representation\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_symmetries/","page":"Symmetry reduction","title":"Symmetry reduction","text":"sgn","category":"page"},{"location":"matsubara_func_symmetries/#MatsubaraFunctions.sgn","page":"Symmetry reduction","title":"MatsubaraFunctions.sgn","text":"sgn(op :: MatsubaraOperation) :: Bool\n\nReturn op.sgn\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_symmetries/","page":"Symmetry reduction","title":"Symmetry reduction","text":"con","category":"page"},{"location":"matsubara_func_symmetries/#MatsubaraFunctions.con","page":"Symmetry reduction","title":"MatsubaraFunctions.con","text":"con(op :: MatsubaraOperation) :: Bool\n\nReturn op.con\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_symmetries/#I/O-to-HDF5-files","page":"Symmetry reduction","title":"I/O to HDF5 files","text":"","category":"section"},{"location":"matsubara_func_symmetries/","page":"Symmetry reduction","title":"Symmetry reduction","text":"save_matsubara_symmetry_group!","category":"page"},{"location":"matsubara_func_symmetries/#MatsubaraFunctions.save_matsubara_symmetry_group!","page":"Symmetry reduction","title":"MatsubaraFunctions.save_matsubara_symmetry_group!","text":"function save_matsubara_symmetry_group!(\n    h  :: HDF5.File,\n    l  :: String,\n    SG :: MatsubaraSymmetryGroup\n    )  :: Nothing\n\nSave MatsubaraSymmetryGroup `SG` with label `l` to file `h`\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_symmetries/","page":"Symmetry reduction","title":"Symmetry reduction","text":"","category":"page"},{"location":"matsubara_grid/#MatsubaraGrid","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"","category":"section"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"A MatsubaraGrid{PT} is a sorted (symmetric) set of MatsubaraFrequency{PT} objects and can be constructed by","category":"page"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"T  = 1.0\nN  = 128\ng1 = MatsubaraGrid(T, N, Fermion) # total no. frequencies is 2N \ng2 = MatsubaraGrid(T, N, Boson)   # total no. frequencies is 2N - 1","category":"page"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"where N is the number of non-negative frequencies defined as follows:","category":"page"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"Particle type Fermion Boson\ntotal no. frequencies 2N 2N-1\nrange of Matsubara index -N: N-1 -N+1:N-1\ndefinition (2n+1)πT 2nπT","category":"page"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"MatsubaraGrid{PT} instances are iterable","category":"page"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"T = 1.0\nN = 128\ng = MatsubaraGrid(T, N, Fermion)\n\nfor v in g\n  println(value(v)) \n  println(index(v))\nend","category":"page"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"and can be evaluated using either a MatsubaraFrequency{PT}, MatsubaraIndex{PT} or Float64. As long as the input argument is in bounds, this will return the corresponding linear index of the grid in the two former cases and the linear index of the closest frequency in the latter case ","category":"page"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"T   = 1.0\nN   = 128\ng   = MatsubaraGrid(T, N, Fermion)\nidx = rand(eachindex(g))\n@assert g(g[idx]) == idx \n@assert g(value(g[idx])) == idx ","category":"page"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"MatsubaraGrid{PT} objects can be saved in HDF5 file format as","category":"page"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"using MatsubaraFunctions \nusing HDF5\n\nfile = h5open(\"test.h5\", \"w\")\nT    = 1.0\nN    = 128\ng    = MatsubaraGrid(T, N, Fermion)\n\nsave_matsubara_grid!(file, \"grid\", g) \ngp = load_matsubara_grid(file, \"grid\")\nclose(file)","category":"page"},{"location":"matsubara_grid/#Types","page":"MatsubaraGrid","title":"Types","text":"","category":"section"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"AbstractMatsubaraGrid","category":"page"},{"location":"matsubara_grid/#MatsubaraFunctions.AbstractMatsubaraGrid","page":"MatsubaraGrid","title":"MatsubaraFunctions.AbstractMatsubaraGrid","text":"abstract type AbstractMatsubaraGrid\n\n\n\n\n\n","category":"type"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"MatsubaraGrid","category":"page"},{"location":"matsubara_grid/#MatsubaraFunctions.MatsubaraGrid","page":"MatsubaraGrid","title":"MatsubaraFunctions.MatsubaraGrid","text":"struct MatsubaraGrid{PT <: AbstractParticle} <: AbstractMatsubaraGrid\n\nMatsubaraGrid type with fields:\n\nT    :: Float64 : temperature\ndata :: OffsetVector{MatsubaraFrequency{PT}, Vector{MatsubaraFrequency{PT}}} : list of MatsubaraFrequency objects\n\n\n\n\n\n","category":"type"},{"location":"matsubara_grid/#Functions","page":"MatsubaraGrid","title":"Functions","text":"","category":"section"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"firstindex","category":"page"},{"location":"matsubara_grid/#Base.firstindex","page":"MatsubaraGrid","title":"Base.firstindex","text":"function firstindex(\n    grid :: AbstractMatsubaraGrid\n    )    :: Int64\n\nReturns the index of the first Matsubara frequency in grid\n\n\n\n\n\n","category":"function"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"lastindex","category":"page"},{"location":"matsubara_grid/#Base.lastindex","page":"MatsubaraGrid","title":"Base.lastindex","text":"function lastindex(\n    grid :: AbstractMatsubaraGrid\n    )    :: Int64\n\nReturns the index of the last Matsubara frequency in grid\n\n\n\n\n\n","category":"function"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"axes","category":"page"},{"location":"matsubara_grid/#Base.axes","page":"MatsubaraGrid","title":"Base.axes","text":"function axes(grid :: AbstractMatsubaraGrid)\n\nReturns range of valid indices for Matsubara grid\n\n\n\n\n\nfunction axes(f :: MatsubaraFunction)\n\nReturns a tuple of valid index ranges for f.data\n\n\n\n\n\nfunction axes(f :: MatsubaraFunction, idx :: Int64)\n\nReturns the range of valid indices along dimension idx of f.data\n\n\n\n\n\n","category":"function"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"is_inbounds","category":"page"},{"location":"matsubara_grid/#MatsubaraFunctions.is_inbounds","page":"MatsubaraGrid","title":"MatsubaraFunctions.is_inbounds","text":"function is_inbounds(\n    w    :: MatsubaraFrequency{PT},\n    grid :: MatsubaraGrid{PT}\n    )    :: Bool where {PT <: AbstractParticle}\n\nChecks if w is contained in grid\n\n\n\n\n\nfunction is_inbounds(\n    x    :: MatsubaraIndex{PT},\n    grid :: MatsubaraGrid{PT}\n    )    :: Bool where {PT <: AbstractParticle}\n\nChecks if x is contained in grid\n\n\n\n\n\nfunction is_inbounds(\n    w    :: Float64,\n    grid :: AbstractMatsubaraGrid\n    )    :: Bool\n\nChecks if w lies within grid bounds\n\n\n\n\n\n","category":"function"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"N","category":"page"},{"location":"matsubara_grid/#MatsubaraFunctions.N","page":"MatsubaraGrid","title":"MatsubaraFunctions.N","text":"function N(\n    grid :: AbstractMatsubaraGrid\n    )    :: Int64\n\nReturns that value N used to construct the grid\n\n\n\n\n\n","category":"function"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"firstvalue","category":"page"},{"location":"matsubara_grid/#MatsubaraFunctions.firstvalue","page":"MatsubaraGrid","title":"MatsubaraFunctions.firstvalue","text":"function firstvalue(\n    grid :: AbstractMatsubaraGrid\n    )    :: Float64\n\nReturns the value of the first Matsubara frequency in grid\n\n\n\n\n\n","category":"function"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"lastvalue","category":"page"},{"location":"matsubara_grid/#MatsubaraFunctions.lastvalue","page":"MatsubaraGrid","title":"MatsubaraFunctions.lastvalue","text":"function lastvalue(\n    grid :: AbstractMatsubaraGrid\n    )    :: Float64\n\nReturns the value of the last Matsubara frequency in grid\n\n\n\n\n\n","category":"function"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"indices","category":"page"},{"location":"matsubara_grid/#MatsubaraFunctions.indices","page":"MatsubaraGrid","title":"MatsubaraFunctions.indices","text":"function indices(grid :: AbstractMatsubaraGrid)\n\nReturns list of indices for Matsubara frequencies in grid\n\n\n\n\n\n","category":"function"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"values","category":"page"},{"location":"matsubara_grid/#Base.values","page":"MatsubaraGrid","title":"Base.values","text":"Base.:values(grid :: AbstractMatsubaraGrid)\n\nReturns list of values for Matsubara frequencies in grid\n\n\n\n\n\n","category":"function"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"info","category":"page"},{"location":"matsubara_grid/#MatsubaraFunctions.info","page":"MatsubaraGrid","title":"MatsubaraFunctions.info","text":"function info(\n    grid :: MatsubaraGrid{PT}\n    )    :: Nothing where {PT <: AbstractParticle}\n\nPrints summary of grid properties\n\n\n\n\n\nfunction info(\n    f :: MatsubaraFunction{GD, SD, DD, Q}\n    ) :: Nothing where {GD, SD, DD, Q <: Number}\n\nPrints summary of function properties\n\n\n\n\n\n","category":"function"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"save_matsubara_grid!","category":"page"},{"location":"matsubara_grid/#MatsubaraFunctions.save_matsubara_grid!","page":"MatsubaraGrid","title":"MatsubaraFunctions.save_matsubara_grid!","text":"function save_matsubara_grid!(\n    h :: HDF5.File,\n    l :: String,\n    g :: AbstractMatsubaraGrid\n    ) :: Nothing\n\nSave MatsubaraGrid g with label l to file h\n\n\n\n\n\n","category":"function"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"load_matsubara_grid","category":"page"},{"location":"matsubara_grid/#MatsubaraFunctions.load_matsubara_grid","page":"MatsubaraGrid","title":"MatsubaraFunctions.load_matsubara_grid","text":"function load_matsubara_grid(\n    h :: HDF5.File,\n    l :: String\n    ) :: AbstractMatsubaraGrid\n\nLoad MatsubaraGrid with label l from file h\n\n\n\n\n\n","category":"function"},{"location":"matsubara_grid/","page":"MatsubaraGrid","title":"MatsubaraGrid","text":"","category":"page"},{"location":"matsubara_index/#MatsubaraIndex","page":"MatsubaraIndex","title":"MatsubaraIndex","text":"","category":"section"},{"location":"matsubara_index/","page":"MatsubaraIndex","title":"MatsubaraIndex","text":"warning: MatsubaraIndex deprecated\nMatsubaraIndex is deprecated and will not be supported in future releases","category":"page"},{"location":"matsubara_index/#Types","page":"MatsubaraIndex","title":"Types","text":"","category":"section"},{"location":"matsubara_index/","page":"MatsubaraIndex","title":"MatsubaraIndex","text":"MatsubaraIndex","category":"page"},{"location":"matsubara_index/#MatsubaraFunctions.MatsubaraIndex","page":"MatsubaraIndex","title":"MatsubaraFunctions.MatsubaraIndex","text":"struct MatsubaraIndex{PT <: AbstractParticle} <: AbstractMatsubaraFrequency\n\nMatsubaraIndex type with fields:\n\nidx :: Int64 : Matsubara index\n\n\n\n\n\n","category":"type"},{"location":"misc/#Types","page":"Miscellaneous","title":"Types","text":"","category":"section"},{"location":"misc/","page":"Miscellaneous","title":"Miscellaneous","text":"PadeApprox","category":"page"},{"location":"misc/#MatsubaraFunctions.PadeApprox","page":"Miscellaneous","title":"MatsubaraFunctions.PadeApprox","text":"struct PadeApprox{Q <: Number}\n\nPadeApprox type with fields:\n\ncoeffs :: Vector{Q} : coefficients for continued fraction fit\nxdat   :: Vector{Q} : evaluation nodes for data\n\n\n\n\n\n","category":"type"},{"location":"misc/","page":"Miscellaneous","title":"Miscellaneous","text":"PeriodicPulay","category":"page"},{"location":"misc/#MatsubaraFunctions.PeriodicPulay","page":"Miscellaneous","title":"MatsubaraFunctions.PeriodicPulay","text":"struct PeriodicPulay{Q <: Number}\n\nPeriodicPulay type with fields:\n\nx     :: Vector{Q}       : solution vector\nFs    :: Matrix{Q}       : history for function evaluations \nXs    :: Matrix{Q}       : history for intermediate solutions\naerrs :: Vector{Float64} : absolute errors\nrerrs :: Vector{Float64} : relative errors\n\n\n\n\n\n","category":"type"},{"location":"misc/#Functions","page":"Miscellaneous","title":"Functions","text":"","category":"section"},{"location":"misc/","page":"Miscellaneous","title":"Miscellaneous","text":"coeffs","category":"page"},{"location":"misc/#MatsubaraFunctions.coeffs","page":"Miscellaneous","title":"MatsubaraFunctions.coeffs","text":"function coeffs(\n    PA :: PadeApprox{Q}\n    )  :: Vector{Q} where {Q <: Number}\n\nReturns PA.coeffs\n\n\n\n\n\n","category":"function"},{"location":"misc/","page":"Miscellaneous","title":"Miscellaneous","text":"xdat","category":"page"},{"location":"misc/#MatsubaraFunctions.xdat","page":"Miscellaneous","title":"MatsubaraFunctions.xdat","text":"function xdat(\n    PA :: PadeApprox{Q}\n    )  :: Vector{Q} where {Q <: Number}\n\nReturns PA.xdat\n\n\n\n\n\n","category":"function"},{"location":"misc/","page":"Miscellaneous","title":"Miscellaneous","text":"solve!","category":"page"},{"location":"misc/#MatsubaraFunctions.solve!","page":"Miscellaneous","title":"MatsubaraFunctions.solve!","text":"function solve!(\n    f!      :: Function,\n    P       :: PeriodicPulay{Q}\n    ;\n    p       :: Int64   = 3,\n    iters   :: Int64   = 100,\n    α       :: Float64 = 0.5,\n    atol    :: Float64 = 1e-8,\n    rtol    :: Float64 = 1e-8,\n    verbose :: Bool    = false\n    )       :: Nothing where {Q <: Number}\n\nRuns the periodic Pulay solver. Here, f(x) = g(x) - x computes the residue for the fixed-point equation g(x) = x. f! should have the form (F, x) -> f!(F, x), such that the residue can be written into a pre-allocated array F.  The following keyword arguments are supported:\n\np       : Pulay period (every p-th iteration Pulay mixing is used)\niters   : maximum number of iterations\nα       : mixing factor\natol    : absolute error tolerance\nrtol    : relative error tolerance\nverbose : show intermediate results?\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_sums/#Advanced-Usage:-Matsubara-Sums","page":"Matsubara sums","title":"Advanced Usage: Matsubara Sums","text":"","category":"section"},{"location":"matsubara_func_sums/","page":"Matsubara sums","title":"Matsubara sums","text":"warning: sum_me deprecated\nThe function sum_me has been deprecated and will not be supported in future releases.","category":"page"},{"location":"matsubara_func_sums/","page":"Matsubara sums","title":"Matsubara sums","text":"For MatsubaraFunction objects G_i_1  i_n(iomega) defined on 1D grids, we export the function sum_me, which computes the series Sigma_m G_i_1  i_n(iomega_m) e^iomega_m 0^+ for m in mathbbZ using tail fits of G together with analytic formulas for summations of the form Sigma_m frac1(iomega_m)^alphae^iomega_m 0^+ with alpha in mathbbN. This, however, requires G to be representable by a Laurent series in an elongated annulus about the imaginary axis. Also, G must decay to zero. This feature is experimental and the API may change in future versions.","category":"page"},{"location":"matsubara_func_sums/","page":"Matsubara sums","title":"Matsubara sums","text":"ξ = 0.5\nT = 1.0\nN = 128\ng = MatsubaraGrid(T, N, Fermion)\nf = MatsubaraFunction(g, 1)\n\nfor v in g\n    f[v] = 1.0 / (im * value(v) - ξ)\nend \n\n# evaluate the series and compare to analytic result\nρ(x, T) = 1.0 / (exp(x / T) + 1.0)\nprintln(abs(sum_me(f) - (ρ(+ξ, T) - 1.0)))","category":"page"},{"location":"matsubara_func_parallelization/#Advanced-Usage:-Running-in-parallel","page":"Parallelization","title":"Advanced Usage: Running in parallel","text":"","category":"section"},{"location":"matsubara_func_parallelization/","page":"Parallelization","title":"Parallelization","text":"To simplify the parallelization of algorithms when using the package, we export some preliminary methods based on the MPI.jl wrapper. For further information on how to set up MPI with Julia see https://github.com/JuliaParallel/MPI.jl.","category":"page"},{"location":"matsubara_func_parallelization/","page":"Parallelization","title":"Parallelization","text":"using MatsubaraFunctions \nusing MPI \n\nMPI.Init()\nmpi_info()\nmpi_println(\"I print on main.\")\nismain = mpi_ismain() # ismain = true if rank is 0\n\nT = 1.0\nN_= 128\ng = MatsubaraGrid(T, N_, Fermion)\nf = MatsubaraFunction(g, 1)\n\n# simple loop parallelization for UnitRange\nfor vidx in mpi_split(1 : length(g))\n    println(\"My rank is $(mpi_rank()): $(vidx)\")\nend\n\n# simple (+) allreduce\nmpi_allreduce!(f)","category":"page"},{"location":"matsubara_func_parallelization/","page":"Parallelization","title":"Parallelization","text":"In addition, calls of MatsubaraSymmetryGroup with an initialization function have an opt-in switch (mode) to enable parallel evaluation of the MatsubaraInitFunction (by default mode = :serial). If mode = :polyester, shared memory multithreading via the Polyester (https://github.com/JuliaSIMD/Polyester.jl) Julia package is used. This mode is recommended for initialization functions that are cheap to evaluate and are unlikely to benefit from Threads.@threads due to the overhead from invoking the Julia scheduler. For more expensive functions, users can choose between mode = :threads, which simply uses Threads.@threads, and mode = :hybrid. The latter combines both MPI and native Julia threads and can therefore be used to run calculations on multiple compute nodes.","category":"page"},{"location":"matsubara_func_parallelization/#Functions","page":"Parallelization","title":"Functions","text":"","category":"section"},{"location":"matsubara_func_parallelization/","page":"Parallelization","title":"Parallelization","text":"mpi_comm","category":"page"},{"location":"matsubara_func_parallelization/#MatsubaraFunctions.mpi_comm","page":"Parallelization","title":"MatsubaraFunctions.mpi_comm","text":"function mpi_comm() :: MPI.Comm\n\nReturn the MPI communicator\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_parallelization/","page":"Parallelization","title":"Parallelization","text":"mpi_rank","category":"page"},{"location":"matsubara_func_parallelization/#MatsubaraFunctions.mpi_rank","page":"Parallelization","title":"MatsubaraFunctions.mpi_rank","text":"function mpi_rank() :: Int64\n\nReturn the current MPI rank\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_parallelization/","page":"Parallelization","title":"Parallelization","text":"mpi_size","category":"page"},{"location":"matsubara_func_parallelization/#MatsubaraFunctions.mpi_size","page":"Parallelization","title":"MatsubaraFunctions.mpi_size","text":"function mpi_size() :: Int64\n\nReturn the size of the MPI communicator \n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_parallelization/","page":"Parallelization","title":"Parallelization","text":"mpi_split","category":"page"},{"location":"matsubara_func_parallelization/#MatsubaraFunctions.mpi_split","page":"Parallelization","title":"MatsubaraFunctions.mpi_split","text":"function mpi_split(\n    r :: UnitRange{Int64}\n    ) :: UnitRange{Int64}\n\nSplits UnitRange evenly among available MPI ranks (including main).  Can, for example, be used to parallelize loops.\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_parallelization/","page":"Parallelization","title":"Parallelization","text":"mpi_allreduce!","category":"page"},{"location":"matsubara_func_parallelization/#MatsubaraFunctions.mpi_allreduce!","page":"Parallelization","title":"MatsubaraFunctions.mpi_allreduce!","text":"function mpi_allreduce!(\n    f :: MatsubaraFunction{GD, SD, DD, Q}\n    ) :: Nothing where {GD, SD, DD, Q <: Number}\n\nInplace MPI reduction (+) for MatsubaraFunction\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_parallelization/","page":"Parallelization","title":"Parallelization","text":"mpi_ismain","category":"page"},{"location":"matsubara_func_parallelization/#MatsubaraFunctions.mpi_ismain","page":"Parallelization","title":"MatsubaraFunctions.mpi_ismain","text":"mpi_ismain() :: Bool\n\nReturns true for MPI rank 0\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_parallelization/","page":"Parallelization","title":"Parallelization","text":"mpi_println","category":"page"},{"location":"matsubara_func_parallelization/#MatsubaraFunctions.mpi_println","page":"Parallelization","title":"MatsubaraFunctions.mpi_println","text":"function mpi_println(\n    s :: String\n    ) :: Nothing\n\nPrint string s on MPI rank 0\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_parallelization/","page":"Parallelization","title":"Parallelization","text":"mpi_info","category":"page"},{"location":"matsubara_func_parallelization/#MatsubaraFunctions.mpi_info","page":"Parallelization","title":"MatsubaraFunctions.mpi_info","text":"mpi_info() :: Nothing\n\nPrint information about available resources\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func_parallelization/","page":"Parallelization","title":"Parallelization","text":"mpi_barrier","category":"page"},{"location":"matsubara_func_parallelization/#MatsubaraFunctions.mpi_barrier","page":"Parallelization","title":"MatsubaraFunctions.mpi_barrier","text":"mpi_barrier() :: Nothing\n\nPlace synchronization barrier for MPI ranks\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/#MatsubaraFunction","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"","category":"section"},{"location":"matsubara_func/#Constructor","page":"MatsubaraFunction","title":"Constructor","text":"","category":"section"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"A MatsubaraFunction is a collection of MatsubaraGrid instances together with an associated tensor structure G_i_1i_n for each point (omega_1  omega_m) in the cartesian product of the grids. ","category":"page"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"MatsubaraFunction","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.MatsubaraFunction","page":"MatsubaraFunction","title":"MatsubaraFunctions.MatsubaraFunction","text":"struct MatsubaraFunction{GD, SD, DD, Q <: Number}\n\nMatsubaraFunction type with fields:\n\ngrids  :: NTuple{GD, AbstractMatsubaraGrid} : collection of Matsubara grids\nshape  :: NTuple{SD, Int64}                 : shape of tensor structure on every grid point\noffset :: NTuple{DD, Int64}                 : offsets for data access\ndata   :: OffsetArray{Q, DD, Array{Q, DD}}  : multidimensional data array for which the axes correspond to Matsubara indices for the GD Matsubara grids\n\n\n\n\n\n","category":"type"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"Some possible constructors are","category":"page"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"T = 1.0\nN = 128\ng = MatsubaraGrid(T, N, Fermion)\n\n# 1D grid, rank 1 tensor with index dimension 1 (scalar valued)\nf1_complex = MatsubaraFunction(g, 1) \nf1_real    = MatsubaraFunction(g, 1; data_t=Float64) \n\n# 1D grid, rank 1 tensor with index dimension 5 (vector valued)\nf2_complex = MatsubaraFunction(g, 5) \nf2_real    = MatsubaraFunction(g, 5; data_t=Float64) \n\n# 1D grid, rank 2 tensor with index dimension 5 (matrix valued)\nf3_complex = MatsubaraFunction(g, 5, 5) \nf3_real    = MatsubaraFunction(g, 5, 5; data_t=Float64) \n\n# 2D grid, rank 2 tensor with index dimension 5 (matrix valued)\nf4_complex = MatsubaraFunction((g, g), 5, 5) \nf4_real    = MatsubaraFunction((g, g), 5, 5; data_t=Float64) ","category":"page"},{"location":"matsubara_func/#Indexing-and-assignment","page":"MatsubaraFunction","title":"Indexing and assignment","text":"","category":"section"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"There are two possible ways to access the data of a MatsubaraFunction, using either the bracket [] or the parenthesis () operator. The former can be used together with a set of linear indices or with a combination of MatsubaraFrequency objects and linear indices (for the tensor structure). It will return the value of the function precisely for the given arguments. () also allows to substitute Float64 for the frequency arguments, in which case a multilinear interpolation is performed. In addition, () is well defined even for out of bounds access, since it makes use of either polynomial or constant extrapolation in this case.","category":"page"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"ξ = 0.5\nT = 1.0\nN = 128\ng = MatsubaraGrid(T, N, Fermion)\nf = MatsubaraFunction(g)\n\nfor v in g\n    f[v] = 1.0 / (im * value(v) - ξ)\nend \n\n# access MatsubaraFunction data\nv = g[rand(eachindex(g))]\nprintln(f[v])        # fast data access, throws error if v is out of bounds\nprintln(f(v))        # fast data access, defined even if v is out of bounds\nprintln(f(value(v))) # slow data access, uses interpolation \n\n# polynomial extrapolation in 1D, constant term set to 1 (default is 0)\nvp = MatsubaraFrequency(T, 256, Fermion)\nprintln(f(vp; extrp = ComplexF64(1.0))) ","category":"page"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"set!","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.set!","page":"MatsubaraFunction","title":"MatsubaraFunctions.set!","text":"function set!(\n    f   :: MatsubaraFunction{GD, SD, DD, Q},\n    val :: Qp,\n    )   :: Nothing where {GD, SD, DD, Q <: Number, Qp <: Number}\n\nInitialize MatsubaraFunction with val\n\n\n\n\n\nfunction set!(\n    f   :: MatsubaraFunction{GD, SD, DD, Q},\n    arr :: Array{Qp, DD},\n    )   :: Nothing where {GD, SD, DD, Q <: Number, Qp <: Number}\n\nInitialize MatsubaraFunction with arr\n\n\n\n\n\nfunction set!(\n    f1 :: MatsubaraFunction,\n    f2 :: MatsubaraFunction\n    )  :: Nothing\n\nInitialize MatsubaraFunction with another MatsubaraFunction (f1 = f2)\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"grid_axes","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.grid_axes","page":"MatsubaraFunction","title":"MatsubaraFunctions.grid_axes","text":"function grid_axes(f :: MatsubaraFunction)\n\nReturns a tuple of valid index ranges for Matsubara grids of f\n\n\n\n\n\nfunction grid_axes(f :: MatsubaraFunction, idx :: Int64)\n\nReturns the range of valid indices for Matsubara grid idx of f\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"LinearIndex","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.LinearIndex","page":"MatsubaraFunction","title":"MatsubaraFunctions.LinearIndex","text":"function LinearIndex(\n    f :: MatsubaraFunction{GD, SD, DD, Q},\n    w :: NTuple{GD, AbstractMatsubaraFrequency},\n    x :: Vararg{Int64, SD} \n    ) :: Int64 where {GD, SD, DD, Q <: Number}\n\nReturns linear index for access to f.data\n\n\n\n\n\nfunction LinearIndex(\n    f    :: MatsubaraFunction{GD, SD, DD, Q},\n    cidx :: CartesianIndex{DD}\n    )    :: Int64 where {GD, SD, DD, Q <: Number}\n\nReturns linear index for access to f.data\n\n\n\n\n\nfunction LinearIndex(\n    f :: MatsubaraFunction{GD, SD, DD, Q},\n    x :: Vararg{Int64, DD}\n    ) :: Int64 where {GD, SD, DD, Q <: Number}\n\nReturns linear index for access to f.data\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"to_Matsubara","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.to_Matsubara","page":"MatsubaraFunction","title":"MatsubaraFunctions.to_Matsubara","text":"function to_Matsubara(\n    f    :: MatsubaraFunction{GD, SD, DD, Q},\n    cidx :: CartesianIndex{DD}\n    )    :: Tuple{NTuple{GD, MatsubaraFrequency}, NTuple{SD, Int64}} where {GD, SD, DD, Q <: Number}\n\nReturns coordinates in grids and index of tensor structure\n\n\n\n\n\nfunction to_Matsubara(\n    f   :: MatsubaraFunction{GD, SD, DD, Q},\n    idx :: Int64 \n    )   :: Tuple{NTuple{GD, MatsubaraFrequency}, NTuple{SD, Int64}} where {GD, SD, DD, Q <: Number}\n\nReturns coordinates in grids and index of tensor structure\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"upper_tail_moments","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.upper_tail_moments","page":"MatsubaraFunction","title":"MatsubaraFunctions.upper_tail_moments","text":"function upper_tail_moments(\n    f  :: MatsubaraFunction{1, SD, DD, Q},\n    α0 :: Q,\n    x  :: Vararg{Int64, SD} \n    )  :: Tuple{Q, Q} where {SD, DD, Q <: Number}\n\nReturns high frequency moments for quadratic model using upper grid bound. Here, α0 is the asymptotic limit for large positive frequencies.\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"lower_tail_moments","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.lower_tail_moments","page":"MatsubaraFunction","title":"MatsubaraFunctions.lower_tail_moments","text":"function lower_tail_moments(\n    f  :: MatsubaraFunction{1, SD, DD, Q},\n    α0 :: Q,\n    x  :: Vararg{Int64, SD} \n    )  :: Tuple{Q, Q} where {SD, DD, Q <: Number}\n\nReturns high frequency moments for quadratic model using lower grid bound. Here, α0 is the asymptotic limit for large negative frequencies.\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/#Getter-Functions","page":"MatsubaraFunction","title":"Getter Functions","text":"","category":"section"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"grids","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.grids","page":"MatsubaraFunction","title":"MatsubaraFunctions.grids","text":"function grids(\n    f :: MatsubaraFunction{GD, SD, DD, Q}\n    ) :: NTuple{GD, AbstractMatsubaraGrid} where {GD, SD, DD, Q <: Number}\n\nReturns f.grids\n\n\n\n\n\nfunction grids(\n    f   :: MatsubaraFunction,\n    idx :: Int64\n    )   :: AbstractMatsubaraGrid\n\nReturns f.grids[idx]\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"shape","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.shape","page":"MatsubaraFunction","title":"MatsubaraFunctions.shape","text":"function shape(\n    f :: MatsubaraFunction{GD, SD, DD, Q}\n    ) :: NTuple{SD, Int64} where {GD, SD, DD, Q <: Number}\n\nReturns f.shape\n\n\n\n\n\nfunction shape(\n    f   :: MatsubaraFunction,\n    idx :: Int64\n    )   :: Int64\n\nReturns f.shape[idx]\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/#Arithmetic-operations","page":"MatsubaraFunction","title":"Arithmetic operations","text":"","category":"section"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"add","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.add","page":"MatsubaraFunction","title":"MatsubaraFunctions.add","text":"function add(\n    f1 :: MatsubaraFunction, \n    f2 :: MatsubaraFunction\n    )  :: MatsubaraFunction\n\nAddition of two MatsubaraFunction, returns new MatsubaraFunction. For brevity, use f1 + f2.\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"add!","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.add!","page":"MatsubaraFunction","title":"MatsubaraFunctions.add!","text":"function add!(\n    f1 :: MatsubaraFunction, \n    f2 :: MatsubaraFunction\n    )  :: Nothing\n\nInplace addition of two MatsubaraFunction (f1 += f2)\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"subtract","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.subtract","page":"MatsubaraFunction","title":"MatsubaraFunctions.subtract","text":"function subtract(\n    f1 :: MatsubaraFunction, \n    f2 :: MatsubaraFunction\n    )  :: MatsubaraFunction\n\nSubtraction of two MatsubaraFunction, returns new MatsubaraFunction. For brevity, use f1 - f2.\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"subtract!","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.subtract!","page":"MatsubaraFunction","title":"MatsubaraFunctions.subtract!","text":"function subtract!(\n    f1 :: MatsubaraFunction, \n    f2 :: MatsubaraFunction\n    )  :: Nothing\n\nInplace subtraction of two MatsubaraFunction (f1 -= f2)\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"mult","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.mult","page":"MatsubaraFunction","title":"MatsubaraFunctions.mult","text":"function mult(\n    f   :: MatsubaraFunction{GD, SD, DD, Q},\n    val :: Qp\n    )   :: MatsubaraFunction{GD, SD, DD, Q} where {GD, SD, DD, Q <: Number, Qp <: Number}\n\nMultiplication of MatsubaraFunction with scalar, returns new MatsubaraFunction. For brevity, use val * f or f * val.\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"mult!","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.mult!","page":"MatsubaraFunction","title":"MatsubaraFunctions.mult!","text":"function mult!(\n    f   :: MatsubaraFunction{GD, SD, DD, Q},\n    val :: Qp\n    )   :: Nothing where {GD, SD, DD, Q <: Number, Qp <: Number}\n\nInplace multiplication of MatsubaraFunction with scalar (f *= val)\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/#Miscellaneous-utilities","page":"MatsubaraFunction","title":"Miscellaneous utilities","text":"","category":"section"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"Base.length","category":"page"},{"location":"matsubara_func/#Base.length","page":"MatsubaraFunction","title":"Base.length","text":"function length(\n    f :: MatsubaraFunction\n    ) :: Int64\n\nReturns length of f.data\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"flatten","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.flatten","page":"MatsubaraFunction","title":"MatsubaraFunctions.flatten","text":"function flatten(\n    f :: MatsubaraFunction{GD, SD, DD, Q}\n    ) :: Vector{Q} where {GD, SD, DD, Q <: Number}\n\nFlatten data array of MatsubaraFunction and return vector of the corresponding data type\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"flatten!","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.flatten!","page":"MatsubaraFunction","title":"MatsubaraFunctions.flatten!","text":"function flatten!(\n    f :: MatsubaraFunction,\n    x :: AbstractVector\n    ) :: Nothing\n\nFlatten data array of MatsubaraFunction into vector\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"unflatten!","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.unflatten!","page":"MatsubaraFunction","title":"MatsubaraFunctions.unflatten!","text":"function unflatten!(\n    f :: MatsubaraFunction,\n    x :: AbstractVector\n    ) :: Nothing\n\nInitialize data array of MatsubaraFunction from vector\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"absmax","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.absmax","page":"MatsubaraFunction","title":"MatsubaraFunctions.absmax","text":"function absmax(\n    f :: MatsubaraFunction\n    ) :: Float64\n\nReturns largest element of f.data (in absolute terms)\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"argmax","category":"page"},{"location":"matsubara_func/#Base.argmax","page":"MatsubaraFunction","title":"Base.argmax","text":"function argmax(\n    f :: MatsubaraFunction{GD, SD, DD, Q}\n    ) :: CartesianIndex{DD} where {GD, SD, DD, Q <: Number}\n\nReturns position of largest element of f.data (in absolute terms)\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/#I/O-to-HDF5-files","page":"MatsubaraFunction","title":"I/O to HDF5 files","text":"","category":"section"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"MatsubaraFunction objects can be saved in HDF5 file format as","category":"page"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"using MatsubaraFunctions \nusing HDF5\n\nfile = h5open(\"test.h5\", \"w\")\nT    = 1.0\nN    = 128\ng    = MatsubaraGrid(T, N, Fermion)\nf    = MatsubaraFunction(g, 1)\n\nsave_matsubara_function!(file, \"func\", f)\nfp = load_matsubara_function(file, \"func\")\nclose(file)","category":"page"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"save_matsubara_function!","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.save_matsubara_function!","page":"MatsubaraFunction","title":"MatsubaraFunctions.save_matsubara_function!","text":"function save_matsubara_function!(\n    h :: HDF5.File,\n    l :: String,\n    f :: MatsubaraFunction\n    ) :: Nothing\n\nSave MatsubaraFunction f with label l to file h  \n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"load_matsubara_function","category":"page"},{"location":"matsubara_func/#MatsubaraFunctions.load_matsubara_function","page":"MatsubaraFunction","title":"MatsubaraFunctions.load_matsubara_function","text":"function load_matsubara_function(\n    h :: HDF5.File,\n    l :: String\n    ) :: MatsubaraFunction\n\nLoad MatsubaraFunction with label l from file h\n\n\n\n\n\n","category":"function"},{"location":"matsubara_func/","page":"MatsubaraFunction","title":"MatsubaraFunction","text":"","category":"page"},{"location":"#MatsubaraFunctions.jl","page":"Home","title":"MatsubaraFunctions.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package aims at providing a convenient interface to rapidly prototype algorithms for multivariable Green's functions of the form G_i_1  i_n(iomega_1  iomega_m), where i_k denote lattice or orbital indices and omega_l are fermionic/bosonic Matsubara frequencies.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package is not yet registered, but available from","category":"page"},{"location":"","page":"Home","title":"Home","text":"pkg> add https://github.com/dominikkiese/MatsubaraFunctions.jl","category":"page"},{"location":"#Related","page":"Home","title":"Related","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For an advanced example for the usage of MatsubaraFunctions, see https://github.com/dominikkiese/MBEsolver.jl","category":"page"}]
}
